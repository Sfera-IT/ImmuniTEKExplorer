<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: immuni.proto

namespace TemporaryExposureKey;

use UnexpectedValueException;

/**
 * Data type representing why this key was published.
 *
 * Protobuf type <code>TemporaryExposureKey.ReportType</code>
 */
class ReportType
{
    /**
     * Never returned by the client API.
     *
     * Generated from protobuf enum <code>UNKNOWN = 0;</code>
     */
    const UNKNOWN = 0;
    /**
     * Generated from protobuf enum <code>CONFIRMED_TEST = 1;</code>
     */
    const CONFIRMED_TEST = 1;
    /**
     * Generated from protobuf enum <code>CONFIRMED_CLINICAL_DIAGNOSIS = 2;</code>
     */
    const CONFIRMED_CLINICAL_DIAGNOSIS = 2;
    /**
     * Generated from protobuf enum <code>SELF_REPORT = 3;</code>
     */
    const SELF_REPORT = 3;
    /**
     * Reserved for future use.
     *
     * Generated from protobuf enum <code>RECURSIVE = 4;</code>
     */
    const RECURSIVE = 4;
    /**
     * Used to revoke a key, never returned by client API.
     *
     * Generated from protobuf enum <code>REVOKED = 5;</code>
     */
    const REVOKED = 5;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::CONFIRMED_TEST => 'CONFIRMED_TEST',
        self::CONFIRMED_CLINICAL_DIAGNOSIS => 'CONFIRMED_CLINICAL_DIAGNOSIS',
        self::SELF_REPORT => 'SELF_REPORT',
        self::RECURSIVE => 'RECURSIVE',
        self::REVOKED => 'REVOKED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ReportType::class, \TemporaryExposureKey_ReportType::class);

